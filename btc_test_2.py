import numpy as np
import os
import yfinance as yf
from tensorflow.keras.models import load_model
import requests
import joblib


def get_real_time_btc_price():
    url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd'
    try:
        response = requests.get(url, timeout=10)
        data = response.json()
        return data['bitcoin']['usd']
    except Exception as e:
        return None


def predict_next_day_price() -> str:
    model_path = os.path.join('models', 'lstm_btc_model_v2.h5')
    scaler_path = os.path.join('models', 'scaler.save')

    if not os.path.exists(model_path) or not os.path.exists(scaler_path):
        return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–ª–∏ scaler. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å."

    try:
        model = load_model(model_path, compile=False)
        scaler = joblib.load(scaler_path)
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ scaler: {e}"

    try:
        btc_data = yf.download('BTC-USD', period='999d', interval='1d')
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å Yahoo Finance: {e}"

    if btc_data.empty:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ BTC."

    close_prices = btc_data['Close'].values.reshape(-1, 1)
    window_size = 30

    if len(close_prices) < window_size:
        return f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∫–Ω–∞ —Ä–∞–∑–º–µ—Ä–æ–º {window_size}"

    try:
        last_window = close_prices[-window_size:]
        scaled_window = scaler.transform(last_window)
        input_window = scaled_window.reshape((1, window_size, 1))

        predicted_scaled_price = model.predict(input_window)[0][0]
        predicted_price = scaler.inverse_transform([[predicted_scaled_price]])[0][0]
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}"

    real_time_price = get_real_time_btc_price()
    if real_time_price is None:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC —Å CoinGecko."

    percent_change = ((predicted_price - real_time_price) / real_time_price) * 100

    result = (
        f"üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ BTC –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å: {predicted_price:.2f} USD\n"
        f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC (CoinGecko): {real_time_price:.2f} USD\n"
        f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {percent_change:.2f}%"
    )
    return result


# –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Ä—É—á–Ω—É—é
if __name__ == '__main__':
    print(predict_next_day_price())
